import telebot
from telebot import types
import functions
from data import descriptions, descriptions_exchanges
import time

bot = telebot.TeleBot('')


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
                     f"""üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.username}  –≤ CryptoBot! üöÄ

üìä –ú–æ–∏ —É—Å–ª—É–≥–∏ –≤–∫–ª—é—á–∞—é—Ç:
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –±–∏—Ä–∂, —Ä—ã–Ω–∫–∞.
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ —Ç—Ä–µ–Ω–¥–∞—Ö.
- –†–∞–∑–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

üìà –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é, –∏ –º—ã –Ω–∞—á–Ω–µ–º!

üåê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –≤–≤–µ–¥–∏—Ç–µ /help.

–£–¥–∞—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π! üíπ""")


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥üí™:\n"
                                      "/coins -   –í—ã–≤–æ–¥–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ\n"
                                      "/changes - –£–∑–Ω–∞–π—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–º–µ–Ω—è–ª–∞—Å—å –≤–∞—à–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è\n"
                                      "/history - –£–∑–Ω–∞–π—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏–ª–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –≤ –ª—é–±–æ–π –¥–µ–Ω—å\n"
                                      "/trending - –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–∫–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è\n"
                                      "/exchanges - –¢–æ–ø —Å–∞–º—ã—Ö –ª—É—á—à–∏—Ö –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n"
                                      "/categories - –°–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞–∫–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫ –Ω–∏–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è\n"
                     )


def send_time_keyboard(message, coin_id):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('1 hour ‚åö', callback_data=f'1h {coin_id}')
    btn2 = types.InlineKeyboardButton('1 day ‚åö', callback_data=f'24h {coin_id}')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton('1 week ‚åö', callback_data=f'7d {coin_id}')
    btn4 = types.InlineKeyboardButton('1 month ‚åö', callback_data=f'1m {coin_id}')
    markup.row(btn3, btn4)
    btn5 = types.InlineKeyboardButton('1 year ‚åö', callback_data=f'1y {coin_id}')
    markup.row(btn5)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏‚è∞:", reply_markup=markup)


@bot.message_handler(commands=['changes'])
def changes(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Bitcoin üí∏', callback_data='bitcoin_changes')
    btn2 = types.InlineKeyboardButton('Ethereum üí∏', callback_data='ethereum_changes')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton('Binance Coin üí∏', callback_data='binance_changes')
    btn4 = types.InlineKeyboardButton('Solana üí∏', callback_data='solana_changes')
    markup.row(btn3, btn4)
    btn5 = types.InlineKeyboardButton('Cardano üí∏', callback_data='cardano_changes')
    btn6 = types.InlineKeyboardButton('Ripple üí∏', callback_data='ripple_changes')
    markup.row(btn5, btn6)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—Éüí∞:", reply_markup=markup)


@bot.message_handler(commands=['coins'])
def coins(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Bitcoin üí∏', callback_data='bitcoin')
    btn2 = types.InlineKeyboardButton('Ethereum üí∏', callback_data='ethereum')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton('Binance Coin üí∏', callback_data='binance')
    btn4 = types.InlineKeyboardButton('Solana üí∏', callback_data='solana')
    markup.row(btn3, btn4)
    btn5 = types.InlineKeyboardButton('Cardano üí∏', callback_data='cardano')
    btn6 = types.InlineKeyboardButton('Ripple üí∏', callback_data='ripple')
    markup.row(btn5, btn6)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—Éüí∞:", reply_markup=markup)


@bot.message_handler(commands=['history'])
def history(message):
    message_parts = message.text.split()
    if len(message_parts) < 3:
        bot.reply_to(message,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ãüí∞ –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥üìÖ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                     "Bitcoin: /history bitcoin –î–î-–ú–ú-–ì–ì–ì–ì\n"
                     "Ethereum: /history ethereum –î–î-–ú–ú-–ì–ì–ì–ì\n"
                     "Binance Coin: /history binance coin –î–î-–ú–ú-–ì–ì–ì–ì\n"
                     "Solana: /history solana –î–î-–ú–ú-–ì–ì–ì–ì\n"
                     "Cardano: /history cardano –î–î-–ú–ú-–ì–ì–ì–ì\n"
                     "Ripple: /history ripple –î–î-–ú–ú-–ì–ì–ì–ì")
        return
    coin_id = message_parts[1]
    date = message_parts[2]
    data = functions.get_cryptocurrency_history(coin_id, date)

    historical_price = data.get('market_data', {}).get('current_price', {}).get('usd')

    if historical_price:
        rounded_price = round(float(historical_price), 2)
        bot.reply_to(message, f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è {coin_id} –Ω–∞ {date}: {rounded_price}$ –¥–æ–ª–ª–∞—Ä–æ–≤ –°–®–êü§ë")
    else:
        bot.reply_to(message, f"–¶–µ–Ω—ã –Ω–∞ {date} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çü•≤")


@bot.message_handler(commands=['trending'])
def trending(message):
    data = functions.get_trending_coins()
    bot.send_message(message.chat.id, "–≠—Ç–æ —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–∫–∞–ª–∏ –∑–∞ 24 —á–∞—Å–∞‚ÄºÔ∏è: ")
    for i in data:
        description = i['content']['description'] if i['content'] is not None else ""
        bot.send_message(message.chat.id,
                         f"–ù–∞–∑–≤–∞–Ω–∏–µüíπ: {i['name']}\n"
                         f"–ò–∫–æ–Ω–∫–∞: {i['large']}\n"
                         f"–¶–µ–Ω–∞üí∏: {i['price']}\n"
                         f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–∑–∞ 24 —á–∞—Å–∞)‚è≥: {round(float(i['price_change_percentage_24h']), 2)}% \n"
                         f"–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ãüìà: {i['sparkline']}\n"
                         f"{description}", parse_mode='html')
        time.sleep(5)


@bot.message_handler(commands=['categories'])
def categories(message):
    data = functions.get_top_categories()
    bot.send_message(message.chat.id, "–≠—Ç–æ —Ç–æ–ø —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π‚úÖ: ")
    for i in data:
        bot.send_message(message.chat.id,
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {i['name']}\n"
                         f"–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—èüíµ: {i['market_cap']}$ \n"
                         f"–¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {', '.join(i['top_3_coins'])}",
                         parse_mode='html')
        time.sleep(5)


@bot.message_handler(commands=['exchanges'])
def exchanges(message):
    data = functions.get_top_exchanges()
    bot.send_message(message.chat.id, "–í–æ—Ç —Ç–æ–ø —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂‚úÖ: ")
    length = 0
    for i in data:
        info = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {i['name']}\n"
        if i['year_established']:
            info += f"–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—èüìÜ: {i['year_established']}\n"
        if i['country']:
            info += f"–°—Ç—Ä–∞–Ω–∞üåç: {i['country']}\n"
        info += f"–°—Å—ã–ª–∫–∞: {i['url']}\n"
        info += f"–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—èüëç: {i['trust_score']}\n"
        info += f"–†–µ–π—Ç–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—èüìí: {i['trust_score_rank']}\n"
        info += f"–¢–æ—Ä–≥–æ–≤—ã–π –æ–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞ (–≤ BTC)‚è∞: {i['trade_volume_24h_btc']}\n\n"
        info += f"{descriptions_exchanges[length]}"
        length += 1

        bot.send_message(message.chat.id, info, parse_mode='html')
        time.sleep(5)


@bot.message_handler()
def base(message):
    bot.reply_to(message, """–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –ø–∏—à–∏—Ç–µ.üòî
–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. /help """)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'bitcoin':
        data = functions.get_coin_info_func("bitcoin")
        bot.send_message(callback.message.chat.id, f""" 
{data["name"]} , —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ {data["symbol"]} {f'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {data["hashing_algorithm"]}' if data["hashing_algorithm"] != None else ''}

–ò –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {', '.join(data["categories"])}

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {data["linksh"]}

Blochain —Å–∞–π—Ç—ã {data["links1"]}, {data["links2"]}, {data["links3"]}. 
{f'–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è {data["genesis_date"]}' if data["genesis_date"] != None else ''} –∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ {data["current_price"]}$
–¢–µ–∫—É—â–∏–π –æ–±—å–µ–º —Ä—ã–Ω–∫–∞ {data["market_cap"]}$  

–û–ø–∏—Å–∞–Ω–∏–µ:
{descriptions["bitcoin"]}""", parse_mode="html")

    elif callback.data == 'ethereum':
        data = functions.get_coin_info_func("ethereum")
        bot.send_message(callback.message.chat.id, f""" 
{data["name"]} , —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ {data["symbol"]} {f'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {data["hashing_algorithm"]}' if data["hashing_algorithm"] != None else ''}

–ò –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {', '.join(data["categories"])}

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {data["linksh"]}

Blochain —Å–∞–π—Ç—ã {data["links1"]}, {data["links2"]}, {data["links3"]}. 
{f'–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è {data["genesis_date"]}' if data["genesis_date"] != None else ''} –∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ {data["current_price"]}$
–¢–µ–∫—É—â–∏–π –æ–±—å–µ–º —Ä—ã–Ω–∫–∞ {data["market_cap"]}$

–û–ø–∏—Å–∞–Ω–∏–µ:
{descriptions["ethereum"]}   
""", parse_mode="html")

    elif callback.data == 'binance':
        data = functions.get_coin_info_func("binancecoin")
        bot.send_message(callback.message.chat.id, f""" 
{data["name"]} , —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ {data["symbol"]} {f'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {data["hashing_algorithm"]}' if data["hashing_algorithm"] != None else ''}

–ò –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {', '.join(data["categories"])}

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {data["linksh"]}

Blochain —Å–∞–π—Ç—ã {data["links1"]}, {data["links2"]}, {data["links3"]}. 
{f'–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è {data["genesis_date"]}' if data["genesis_date"] != None else ''} –∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ {data["current_price"]}$
–¢–µ–∫—É—â–∏–π –æ–±—å–µ–º —Ä—ã–Ω–∫–∞ {data["market_cap"]}$    

–û–ø–∏—Å–∞–Ω–∏–µ:
{descriptions["binance"]} """, parse_mode="html")

    elif callback.data == 'solana':
        data = functions.get_coin_info_func("solana")
        bot.send_message(callback.message.chat.id, f""" 
{data["name"]} , —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ {data["symbol"]} {f'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {data["hashing_algorithm"]}' if data["hashing_algorithm"] != None else ''}

–ò –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {', '.join(data["categories"])}

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {data["linksh"]}

Blochain —Å–∞–π—Ç—ã {data["links1"]}, {data["links2"]}, {data["links3"]}. 
{f'–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è {data["genesis_date"]}' if data["genesis_date"] != None else ''} –∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ {data["current_price"]}$
–¢–µ–∫—É—â–∏–π –æ–±—å–µ–º —Ä—ã–Ω–∫–∞ {data["market_cap"]}$

–û–ø–∏—Å–∞–Ω–∏–µ:
{descriptions["solana"]}       
""", parse_mode="html")

    elif callback.data == 'cardano':
        data = functions.get_coin_info_func("cardano")
        bot.send_message(callback.message.chat.id, f""" 
{data["name"]} , —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ {data["symbol"]} {f'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {data["hashing_algorithm"]}' if data["hashing_algorithm"] != None else ''}

–ò –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {', '.join(data["categories"])}

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {data["linksh"]}

Blochain —Å–∞–π—Ç—ã {data["links1"]}, {data["links2"]}, {data["links3"]}. 
{f'–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è {data["genesis_date"]}' if data["genesis_date"] != None else ''} –∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ {data["current_price"]}$
–¢–µ–∫—É—â–∏–π –æ–±—å–µ–º —Ä—ã–Ω–∫–∞ {data["market_cap"]}$   

–û–ø–∏—Å–∞–Ω–∏–µ:
{descriptions["cardano"]}     
""", parse_mode="html")

    elif callback.data == 'ripple':
        data = functions.get_coin_info_func("ripple")
        bot.send_message(callback.message.chat.id, f""" 
{data["name"]} , —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ {data["symbol"]} {f'–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {data["hashing_algorithm"]}' if data["hashing_algorithm"] != None else ''}

–ò –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {', '.join(data["categories"])}

–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {data["linksh"]}

Blochain —Å–∞–π—Ç—ã {data["links1"]}, {data["links2"]}, {data["links3"]}. 
{f'–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è {data["genesis_date"]}' if data["genesis_date"] != None else ''} –∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ {data["current_price"]}$
–¢–µ–∫—É—â–∏–π –æ–±—å–µ–º —Ä—ã–Ω–∫–∞ {data["market_cap"]}$

–û–ø–∏—Å–∞–Ω–∏–µ:
{descriptions["ripple"]}       
""", parse_mode="html")
    elif callback.data == "bitcoin_changes":
        send_time_keyboard(callback.message, "bitcoin")
    elif callback.data == "ethereum_changes":
        send_time_keyboard(callback.message, "ethereum")
    elif callback.data == "binance_changes":
        send_time_keyboard(callback.message, "binancecoin")
    elif callback.data == "solana_changes":
        send_time_keyboard(callback.message, "solana")
    elif callback.data == "cardano_changes":
        send_time_keyboard(callback.message, "cardano")
    elif callback.data == "ripple_changes":
        send_time_keyboard(callback.message, "ripple")
    else:
        array = callback.data.split()
        time = array[0]
        coin_id = array[1]
        if time == "1h":
            price = functions.get_current_price("1h", coin_id)
            bot.send_message(callback.message.chat.id, f"{coin_id} –∑–∞ 1 —á–∞—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {price[0]}% üìà")
        elif time == "24h":
            price = functions.get_current_price("24h", coin_id)
            bot.send_message(callback.message.chat.id,
                             f"{coin_id} –∑–∞ 24 —á–∞—Å–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {price[1]}%, —ç—Ç–æ {price[0]}$ üìà")
        elif time == "7d":
            price = functions.get_current_price("7d", coin_id)
            bot.send_message(callback.message.chat.id, f"{coin_id} –∑–∞ 1 –Ω–µ–¥–µ–ª—é –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {price[0]}% üìà")
        elif time == "1m":
            price = functions.get_current_price("1m", coin_id)
            bot.send_message(callback.message.chat.id, f"{coin_id} –∑–∞ 1 –º–µ—Å—è—Ü –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {price[0]}% üìà")
        elif time == "1y":
            price = functions.get_current_price("1y", coin_id)
            bot.send_message(callback.message.chat.id, f"{coin_id} –∑–∞ 1 –≥–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {price[0]}% üìà")


bot.polling(none_stop=True)
